// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

namespace Microsoft.Quantum.QsCompiler.TargetGeneration

open Microsoft.CodeAnalysis
open Microsoft.CodeAnalysis.CSharp.Syntax
open Microsoft.CodeAnalysis.Formatting

open Microsoft.Quantum.RoslynWrapper

open System
open System.Collections.Generic
open System.IO
open Microsoft.CodeAnalysis
open Microsoft.Quantum.QsCompiler
open Microsoft.Quantum.QsCompiler.CsharpGeneration
open Microsoft.Quantum.QsCompiler.DataTypes
open Microsoft.Quantum.QsCompiler.Diagnostics
open Microsoft.Quantum.QsCompiler.ReservedKeywords
open Microsoft.Quantum.QsCompiler.SyntaxTree
open Microsoft.Quantum.QsCompiler.Transformations.BasicTransformations
open System.Collections.Immutable

module GenerateTarget =
    let autoNamespaces =
        [
            "System"
            "Microsoft.Quantum.Core"
            "Microsoft.Quantum.Intrinsic"
            "Microsoft.Quantum.Simulation.Core"
        ]

    /// The comment that is displayed at the top of generated files.
    let internal autogenComment = [
        "//------------------------------------------------------------------------------"
        "// <auto-generated>                                                             "
        "//     This code was generated by a tool.                                       "
        "//     Changes to this file may cause incorrect behavior and will be lost if    "
        "//     the code is regenerated.                                                 "
        "// </auto-generated>                                                            "
        "//------------------------------------------------------------------------------"
    ]

    // Builds the C# syntaxTree for the Q# elements defined in the given file.
    let buildHeader () =
        let usings = autoNamespaces |> List.map (fun ns -> ``using`` ns)

        ``compilation unit``
            []
            usings
            []
        // We add a "pragma warning disable 1591" since we don't generate doc comments in our C# code.
        |> ``pragmaDisableWarning`` 1591
        |> ``pragmaDisableWarning`` 0162 // unreachable code
        |> ``pragmaDisableWarning`` 0436 // shadowing existing classes from references
        |> ``with leading comments`` autogenComment

    let generateOne callable = 
        ()
